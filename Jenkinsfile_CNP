#!groovy

import uk.gov.hmcts.contino.GithubAPI

@Library("Infrastructure")

String product = "div"
String component = "pfe"

def yarnBuilder = new uk.gov.hmcts.contino.YarnBuilder(this)

def secrets = [
  'div-${env}': [
    secret('session-secret', 'SECRET'),
    secret('redis-secret', 'SESSION_ENCRYPTION_SECRET'),
    secret('idam-secret', 'IDAM_SECRET'),
    secret('os-places-token', 'POST_CODE_ACCESS_TOKEN'),
    secret('frontend-secret', 'MICROSERVICE_KEY'),
    secret('launchdarkly-key', 'LAUNCHDARKLY_KEY'),
    secret('idam-citizen-username', 'IDAM_CITIZEN_EMAIL'),
    secret('idam-citizen-password', 'IDAM_CITIZEN_PASSWORD')

  ]
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
  [ $class: 'AzureKeyVaultSecret',
    secretType: 'Secret',
    name: secretName,
    version: '',
    envVariable: envVar
  ]
}

def labels = [
  "enable_mutation_test",
  "enable_fortify_scan",
  "enable_full_functional_test"
]

def populateLabelStates(labels) {
  def states = [:]
  // Get labels from GitHub repo
  def repoLabels = new GithubAPI(this).getLabelsbyPattern(env.BRANCH_NAME, "enable_")

  // Check existence of provided label, and store in labelStates map
  def getLabelState = { label ->
    if (label == "atLeastOneEnabled") {
      return
    }
    def labelExists = repoLabels.contains(label) ? true : false
    states.put(label, labelExists)
  }

  // Iterate over labels List to build labelStates map
  labels.each { label -> getLabelState(label) }

  // Hardcode enable_all label
  if (!states.containsKey("enable_all")) {
    getLabelState("enable_all")
  }

  // Check if at least one label is true
  states.put("atLeastOneEnabled", states.any {key, value -> value == true })

  return states
}
labelStates = populateLabelStates(labels)

def checkLabel(label) {
  return (labelStates.enable_all || labelStates.get(label))
}

withPipeline("nodejs", product, component) {
  // installCharts()
  enableAksStagingDeployment()
  disableLegacyDeployment()

  env.FEATURE_IDAM = 'true'
  env.IDAM_API_URL = 'https://idam-api.aat.platform.hmcts.net'

  if (env.CHANGE_TITLE) {
    if(env.CHANGE_TITLE.startsWith('[PREVIEW]')) {
      env.RUN_BASIC_TESTS = "true"
    } else {
      loadVaultSecrets(secrets)
    }
  }

  after('build') {
    yarnBuilder.yarn('setup')
  }

  after('test') {
    yarnBuilder.yarn('test-validation')
  }

  after('functionalTest:aat') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'smoke-output/**/*'
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'functional-output/**/*'
  }

  before('functionalTest:preview') {
    //This is to force the loading of preview.yaml instead of testing.yaml in PRs
    env.NODE_CONFIG_ENV = 'preview'
  }

  after('functionalTest:preview') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'smoke-output/**/*'
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'functional-output/**/*'
  }
}

if (checkLabel("atLeastOneEnabled")) {
  properties([
    pipelineTriggers([cron('00 21 * * *')]),
    parameters([
      string(name: 'URL_TO_TEST', defaultValue: "https://${product}-${component}-pr-${CHANGE_ID}.service.core-compute-preview.internal", description: 'The URL you want to run these tests against'),
    ])
  ])

  final FULL_FUNCTIONAL_TESTS_TIMEOUT_IN_MINUTES = 240

  withNightlyPipeline("nodejs", product, component) {
    onPR() {
      env.TEST_URL = params.URL_TO_TEST
      env.FEATURE_IDAM = 'true'
      if (checkLabel("enable_mutation_test")) {
        enableMutationTest()
      }
      if (checkLabel("enable_full_functional_test")) {
        enableFullFunctionalTest(FULL_FUNCTIONAL_TESTS_TIMEOUT_IN_MINUTES)

        after('fullFunctionalTest') {
          steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'smoke-output/**/*'
          steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'functional-output/**/*'
        }
      }
      if (checkLabel("enable_fortify_scan")) {
        enableFortifyScan()

        after('fortify-scan') {
          steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/Fortify Scan/**/*'
        }
      }
    }
  }
}
